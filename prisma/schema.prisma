// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  patients Patient[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Patient {
  id               String   @id @default(cuid())
  name             String
  dob              DateTime
  diabetesType     String   // Type 1, Type 2, etc.
  lifestyle        String?  // Text description of typical lifestyle
  activityLevel    String?  // Low, Moderate, High
  usualMedications String   // JSON string of medications
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  entries         Entry[]
  recommendations Recommendation[]

  @@map("patients")
}

model Entry {
  id              String   @id @default(cuid())
  patientId       String
  entryType       String   // 'glucose', 'meal', 'insulin'
  value           String
  units           String?
  medicationBrand String?  // For insulin entries
  occurredAt      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("entries")
}

model Recommendation {
  id         String   @id @default(cuid())
  patientId  String
  prompt     String
  response   String
  doseUnits  Int?
  reasoning  String?
  safetyNotes String?
  confidence String?
  recommendedMonitoring String?
  targetTime DateTime? // When the insulin is planned to be administered
  createdAt  DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("recommendations")
} 